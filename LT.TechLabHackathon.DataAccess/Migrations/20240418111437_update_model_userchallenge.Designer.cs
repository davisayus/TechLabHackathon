// <auto-generated />
using System;
using LT.TechLabHackathon.DataAccess.SqlServerContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LT.TechLabHackathon.DataAccess.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20240418111437_update_model_userchallenge")]
    partial class update_model_userchallenge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.AuthUserKey", b =>
                {
                    b.Property<int>("AuthUserKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthUserKeyId"));

                    b.Property<string>("DynamicKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("KeyCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("KeyExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuthUserKeyId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthUserKeys");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallengeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputParameters")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultDataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChallengeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ResultDataTypeId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeConstraint", b =>
                {
                    b.Property<int>("ConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConstraintId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConstraintId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeConstraints");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeExample", b =>
                {
                    b.Property<int>("ExampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExampleId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("ExampleId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeExamples");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeInputParameter", b =>
                {
                    b.Property<int>("InputParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InputParameterId"));

                    b.Property<string>("InputValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("InputParameterId");

                    b.HasIndex("ValidationId");

                    b.ToTable("ChallengeInputParameters");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeInputSetupParameter", b =>
                {
                    b.Property<int>("ChallengeInputSetupParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallengeInputSetupParameterId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("ChallengeInputSetupParameterId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("DataTypeId");

                    b.ToTable("ChallengeInputSetupParameters");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLanguageSignature", b =>
                {
                    b.Property<int>("LanguageSignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageSignatureId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageSignatureId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ChallengeLanguageSignatures");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NormalTime")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.ToTable("ChallengeLevels");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", b =>
                {
                    b.Property<int>("ValidationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidationId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("OutputValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ValidationId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeValidations");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.GeneralDataType", b =>
                {
                    b.Property<int>("DataTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataTypeId");

                    b.ToTable("GeneralDataTypes");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("ProgrammingLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammingLanguageId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguages");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguageDataType", b =>
                {
                    b.Property<int>("ProgrammingLanguageDataTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammingLanguageDataTypeId"));

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("ProgrammingLanguageDataTypeId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguageDataTypes");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguageReservedWord", b =>
                {
                    b.Property<int>("ProgrammingLanguageReservedWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammingLanguageReservedWordId"));

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ReservedWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgrammingLanguageReservedWordId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguageReservedWords");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("AuthDoublefactor")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.UserChallenge", b =>
                {
                    b.Property<int>("UserChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserChallengeId"));

                    b.Property<int>("Attemps")
                        .HasColumnType("int");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Penalized")
                        .HasColumnType("bit");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UnlockedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnlokedTime")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserChallengeId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChallenges");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.UserChallengeHistory", b =>
                {
                    b.Property<int>("UserChallengeHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserChallengeHistoryId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserChallengeHistoryId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChallengeHistories");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.UserScore", b =>
                {
                    b.Property<int>("UserScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserScoreId"));

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UnlockedChallenges")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserScoreId");

                    b.HasIndex("UserId");

                    b.ToTable("UserScores");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.AuthUserKey", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Challenge", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ChallengeLevel", "Level")
                        .WithMany("Challenges")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.GeneralDataType", "DataType")
                        .WithMany("Challenges")
                        .HasForeignKey("ResultDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeConstraint", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("Constraints")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeExample", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("Examples")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeInputParameter", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", "Validation")
                        .WithMany("InputParameters")
                        .HasForeignKey("ValidationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeInputSetupParameter", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("InputSetupParameters")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.GeneralDataType", "DataType")
                        .WithMany("InputSetupParameters")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLanguageSignature", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("LanguageSignatures")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany()
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("Validations")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguageDataType", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.GeneralDataType", "DataType")
                        .WithMany("ProgrammingLanguageDataTypes")
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("DataTypes")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguageReservedWord", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("ReservedWords")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.User", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.UserChallenge", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.User", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.UserChallengeHistory", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.User", "User")
                        .WithMany("UserChallengeHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.UserScore", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.User", "User")
                        .WithMany("UserScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Challenge", b =>
                {
                    b.Navigation("Constraints");

                    b.Navigation("Examples");

                    b.Navigation("InputSetupParameters");

                    b.Navigation("LanguageSignatures");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLevel", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", b =>
                {
                    b.Navigation("InputParameters");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.GeneralDataType", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("InputSetupParameters");

                    b.Navigation("ProgrammingLanguageDataTypes");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("DataTypes");

                    b.Navigation("ReservedWords");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.User", b =>
                {
                    b.Navigation("UserChallengeHistories");

                    b.Navigation("UserChallenges");

                    b.Navigation("UserScores");
                });
#pragma warning restore 612, 618
        }
    }
}
