// <auto-generated />
using LT.TechLabHackathon.DataAccess.SqlServerContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LT.TechLabHackathon.DataAccess.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20240331213232_Initialcreate")]
    partial class Initialcreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallengeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChallengeId");

                    b.HasIndex("LevelId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeConstraint", b =>
                {
                    b.Property<int>("ConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConstraintId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConstraintId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeConstraints");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeExample", b =>
                {
                    b.Property<int>("ExampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExampleId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("ExampleId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeExamples");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeInputParameter", b =>
                {
                    b.Property<int>("InputParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InputParameterId"));

                    b.Property<string>("InputValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("InputParameterId");

                    b.HasIndex("ParameterTypeId");

                    b.HasIndex("ValidationId");

                    b.ToTable("ChallengeInputParameters");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLanguageSignature", b =>
                {
                    b.Property<int>("LanguageSignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageSignatureId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageSignatureId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ChallengeLanguageSignatures");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.ToTable("ChallengeLevels");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", b =>
                {
                    b.Property<int>("ValidationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidationId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("OutputValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParameterTypeId")
                        .HasColumnType("int");

                    b.HasKey("ValidationId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ParameterTypeId");

                    b.ToTable("ChallengeValidations");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ParameterType", b =>
                {
                    b.Property<int>("ParameterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParameterTypeId"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParameterTypeId");

                    b.ToTable("ParameterTypes");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("ProgrammingLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammingLanguageId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguages");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguageReservedWord", b =>
                {
                    b.Property<int>("ProgrammingLanguageReservedWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammingLanguageReservedWordId"));

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("ReservedWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgrammingLanguageReservedWordId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguageReservedWords");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Challenge", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ChallengeLevel", "Level")
                        .WithMany("Challenges")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeConstraint", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("Constraints")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeExample", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("Examples")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeInputParameter", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ParameterType", "ParameterType")
                        .WithMany("InputParameters")
                        .HasForeignKey("ParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", "Validation")
                        .WithMany("InputParameters")
                        .HasForeignKey("ValidationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterType");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLanguageSignature", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("LanguageSignatures")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany()
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.Challenge", "Challenge")
                        .WithMany("Validations")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ParameterType", "ParameterType")
                        .WithMany("Validations")
                        .HasForeignKey("ParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("ParameterType");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguageReservedWord", b =>
                {
                    b.HasOne("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("ReservedWords")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.Challenge", b =>
                {
                    b.Navigation("Constraints");

                    b.Navigation("Examples");

                    b.Navigation("LanguageSignatures");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeLevel", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ChallengeValidation", b =>
                {
                    b.Navigation("InputParameters");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ParameterType", b =>
                {
                    b.Navigation("InputParameters");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("LT.TechLabHackathon.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("ReservedWords");
                });
#pragma warning restore 612, 618
        }
    }
}
